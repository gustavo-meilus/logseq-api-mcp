name: Main CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --group test

      - name: Run ruff check
        run: uv run ruff check

      - name: Run ruff format check
        run: uv run ruff format --check

      - name: Run all tests with coverage
        run: uv run pytest --cov=src --cov-report=term-missing --cov-fail-under=80

      - name: Test MCP server health and tools
        run: uv run pytest tests/test_mcp_server.py -v

      - name: Validate tool discovery
        run: |
          uv run python -c "
          import sys
          sys.path.insert(0, 'src')
          import tools
          print(f'‚úÖ Discovered {len(tools.__all__)} tools: {tools.__all__}')

          expected_tools = [
              'append_block_in_page',
              'create_page', 
              'edit_block',
              'get_all_pages',
              'get_page_blocks',
              'get_block_content',
              'get_all_page_content',
              'get_page_links',
              'get_linked_flashcards'
          ]

          for tool in expected_tools:
              assert tool in tools.__all__, f'Missing expected tool: {tool}'

          print('‚úÖ All expected tools are discovered')
          "

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-python${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml

  build-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python 3.12
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --group test

      - name: Build package
        run: uv build

      - name: Test package installation
        run: |
          uv run pip install dist/*.whl
          uv run python -c "
          import sys
          sys.path.insert(0, 'src')
          import tools
          print(f'‚úÖ Package installation successful: {len(tools.__all__)} tools available')
          "

  ci-summary:
    runs-on: ubuntu-latest
    needs: [test, build-test]
    if: always()

    steps:
      - name: CI Summary
        run: |
          echo "üîç CI Pipeline Summary"
          echo "====================="

          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "‚úÖ Tests: PASSED"
          else
            echo "‚ùå Tests: FAILED"
          fi

          if [ "${{ needs.build-test.result }}" == "success" ] || [ "${{ needs.build-test.result }}" == "skipped" ]; then
            echo "‚úÖ Build: PASSED/SKIPPED"
          else
            echo "‚ùå Build: FAILED"
          fi

          if [ "${{ needs.test.result }}" == "success" ]; then
            echo ""
            echo "üéâ CI pipeline completed successfully!"
            echo "‚úÖ Code is ready for merge"
          else
            echo ""
            echo "‚ùå CI pipeline failed"
            echo "Please address the issues before merging"
            exit 1
          fi
