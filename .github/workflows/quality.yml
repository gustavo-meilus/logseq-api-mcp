name: Advanced Quality & Security

on:
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security checks daily at 3 AM UTC
    - cron: "0 3 * * *"
  workflow_dispatch:

jobs:
  code-quality:
    runs-on: ubuntu-latest
    name: Advanced Code Quality

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python 3.12
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Run MyPy type checker
        run: |
          echo "üîç Running MyPy type checker..."
          uv run mypy src/ --ignore-missing-imports --show-error-codes

      - name: Run Bandit security linter
        run: |
          echo "üîí Running Bandit security scanner..."
          uv run bandit -r src/ -f json -o bandit-report.json || true
          uv run bandit -r src/ -f txt

      - name: Check for TODO/FIXME comments
        run: |
          echo "üìù Checking for TODO/FIXME comments..."
          if grep -r "TODO\|FIXME" src/ tests/ --exclude-dir=__pycache__; then
            echo "‚ö†Ô∏è Found TODO/FIXME comments in code"
            echo "Consider addressing these before merging"
          else
            echo "‚úÖ No TODO/FIXME comments found"
          fi

      - name: Check for hardcoded secrets
        run: |
          echo "üîê Checking for potential hardcoded secrets..."
          if grep -r -i "password\|secret\|key\|token" src/ --exclude-dir=__pycache__ | grep -v "LOGSEQ_API_TOKEN\|Bearer"; then
            echo "‚ö†Ô∏è Potential hardcoded secrets found"
            echo "Please review and use environment variables instead"
            exit 1
          else
            echo "‚úÖ No hardcoded secrets found"
          fi

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: bandit-report.json

  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Security Check

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python 3.12
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Check for vulnerable dependencies
        run: |
          echo "üîç Checking for vulnerable dependencies..."
          uv run safety check --json --save-json safety-report.json || true
          uv run safety check

      - name: Check dependency licenses
        run: |
          echo "üìÑ Checking dependency licenses..."
          uv run pip-licenses --format=json --output-file=licenses.json || true
          uv run pip-licenses

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-reports
          path: |
            safety-report.json
            licenses.json

  performance-test:
    runs-on: ubuntu-latest
    name: Performance & Memory Tests
    if: github.event_name == 'schedule'

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python 3.12
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Run performance tests
        run: |
          echo "‚ö° Running performance tests..."
          uv run pytest tests/ -v --durations=0 --tb=short

      - name: Memory usage test
        run: |
          echo "üß† Testing memory usage..."
          uv run python -c "
          import tracemalloc
          import sys
          sys.path.insert(0, 'src')

          tracemalloc.start()
          import tools
          current, peak = tracemalloc.get_traced_memory()
          print(f'Memory usage - Current: {current / 1024 / 1024:.2f} MB, Peak: {peak / 1024 / 1024:.2f} MB')
          assert peak < 50 * 1024 * 1024, f'Memory usage too high: {peak / 1024 / 1024:.2f} MB'
          print('‚úÖ Memory usage within acceptable limits')
          "

  quality-gate:
    runs-on: ubuntu-latest
    needs: [code-quality, dependency-check, performance-test]
    if: always()

    steps:
      - name: Quality Gate Summary
        run: |
          echo "üîç Quality Gate Summary"
          echo "======================"

          if [ "${{ needs.code-quality.result }}" == "success" ]; then
            echo "‚úÖ Code Quality: PASSED"
          else
            echo "‚ùå Code Quality: FAILED"
          fi

          if [ "${{ needs.dependency-check.result }}" == "success" ]; then
            echo "‚úÖ Dependency Check: PASSED"
          else
            echo "‚ùå Dependency Check: FAILED"
          fi

          if [ "${{ needs.performance-test.result }}" == "success" ] || [ "${{ needs.performance-test.result }}" == "skipped" ]; then
            echo "‚úÖ Performance Test: PASSED/SKIPPED"
          else
            echo "‚ùå Performance Test: FAILED"
          fi

          if [ "${{ needs.code-quality.result }}" == "success" ] && [ "${{ needs.dependency-check.result }}" == "success" ]; then
            echo ""
            echo "üéâ All quality checks passed!"
            echo "‚úÖ Code meets quality standards"
          else
            echo ""
            echo "‚ùå Some quality checks failed"
            echo "Please address the issues before merging"
            exit 1
          fi
